#!/bin/bash
set -e
#set -x

echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
echo " TLS Bootstrapping Worker Nodes "
echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"

echo "====================================================================="
echo " Step 1 Create the Boostrap Token to be used by Nodes(Kubelets) to invoke Certificate API"
echo "====================================================================="
kubectl get nodes --kubeconfig admin.kubeconfig

rm -Rf bootstrap-token-07401b
cat > bootstrap-token-07401b.yaml <<EOF
apiVersion: v1
kind: Secret
metadata:
  # Name MUST be of form "bootstrap-token-<token id>"
  name: bootstrap-token-07401b
  namespace: kube-system

# Type MUST be 'bootstrap.kubernetes.io/token'
type: bootstrap.kubernetes.io/token
stringData:
  # Human readable description. Optional.
  description: "The default bootstrap token generated by 'kubeadm init'."

  # Token ID and secret. Required.
  token-id: 07401b
  token-secret: f395accd246ae52d

  # Expiration. Optional.
  expiration: 2021-03-10T03:22:11Z

  # Allowed usages.
  usage-bootstrap-authentication: "true"
  usage-bootstrap-signing: "true"

  # Extra groups to authenticate the token as. Must start with "system:bootstrappers:"
  auth-extra-groups: system:bootstrappers:worker
EOF

kubectl create -f bootstrap-token-07401b.yaml

echo "====================================================================="
echo " Step 2 Authorize workers(kubelets) to create CSR"
echo "====================================================================="
rm -Rf csrs-for-bootstrapping.yaml
cat > csrs-for-bootstrapping.yaml <<EOF
# enable bootstrapping nodes to create CSR
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: create-csrs-for-bootstrapping
subjects:
- kind: Group
  name: system:bootstrappers
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: system:node-bootstrapper
  apiGroup: rbac.authorization.k8s.io
EOF

kubectl create -f csrs-for-bootstrapping.yaml

echo "====================================================================="
echo " Step 3 Authorize workers(kubelets) to approve CSR"
echo "====================================================================="
rm -Rf auto-approve-csrs-for-group.yaml
cat > auto-approve-csrs-for-group.yaml <<EOF
# Approve all CSRs for the group "system:bootstrappers"
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: auto-approve-csrs-for-group
subjects:
- kind: Group
  name: system:bootstrappers
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: system:certificates.k8s.io:certificatesigningrequests:nodeclient
  apiGroup: rbac.authorization.k8s.io
EOF

kubectl create -f auto-approve-csrs-for-group.yaml

echo "====================================================================="
echo " Step 3 Authorize workers(kubelets) to Auto Renew Certificates on expiration"
echo "====================================================================="
rm -Rf auto-approve-renewals-for-nodes.yaml
cat > auto-approve-renewals-for-nodes.yaml <<EOF
# Approve renewal CSRs for the group "system:nodes"
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: auto-approve-renewals-for-nodes
subjects:
- kind: Group
  name: system:nodes
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: system:certificates.k8s.io:certificatesigningrequests:selfnodeclient
  apiGroup: rbac.authorization.k8s.io
EOF

kubectl create -f auto-approve-renewals-for-nodes.yaml

# echo "====================================================================="
# echo " Step 4 Configure Kubelet to TLS Bootstrap"
# echo "====================================================================="

# cat <<EOF | sudo tee /var/lib/kubelet/bootstrap-kubeconfig
# apiVersion: v1
# clusters:
# - cluster:
#     certificate-authority: /var/lib/kubernetes/ca.crt
#     server: https://192.168.5.30:6443
#   name: bootstrap
# contexts:
# - context:
#     cluster: bootstrap
#     user: kubelet-bootstrap
#   name: bootstrap
# current-context: bootstrap
# kind: Config
# preferences: {}
# users:
# - name: kubelet-bootstrap
#   user:
#     token: 07401b.f395accd246ae52d
# EOF

# echo "====================================================================="
# echo " Step 5 Create Kubelet Config File"
# echo "====================================================================="

# cat <<EOF | sudo tee /var/lib/kubelet/kubelet-config.yaml
# kind: KubeletConfiguration
# apiVersion: kubelet.config.k8s.io/v1beta1
# authentication:
#   anonymous:
#     enabled: false
#   webhook:
#     enabled: true
#   x509:
#     clientCAFile: "/var/lib/kubernetes/ca.crt"
# authorization:
#   mode: Webhook
# clusterDomain: "cluster.local"
# clusterDNS:
#   - "10.96.0.10"
# resolvConf: "/run/systemd/resolve/resolv.conf"
# runtimeRequestTimeout: "15m"
# EOF

# echo "====================================================================="
# echo " Step 6 Configure Kubelet Service"
# echo "====================================================================="

# cat <<EOF | sudo tee /etc/systemd/system/kubelet.service
# [Unit]
# Description=Kubernetes Kubelet
# Documentation=https://github.com/kubernetes/kubernetes
# After=docker.service
# Requires=docker.service

# [Service]
# ExecStart=/usr/local/bin/kubelet \\
#   --bootstrap-kubeconfig="/var/lib/kubelet/bootstrap-kubeconfig" \\
#   --config=/var/lib/kubelet/kubelet-config.yaml \\
#   --image-pull-progress-deadline=2m \\
#   --kubeconfig=/var/lib/kubelet/kubeconfig \\
#   --cert-dir=/var/lib/kubelet/pki/ \\
#   --rotate-certificates=true \\
#   --rotate-server-certificates=true \\
#   --network-plugin=cni \\
#   --register-node=true \\
#   --v=2
# Restart=on-failure
# RestartSec=5

# [Install]
# WantedBy=multi-user.target
# EOF

# echo "====================================================================="
# echo " Step 7 Configure the Kubernetes Proxy"
# echo "====================================================================="
# sudo mv kube-proxy.kubeconfig /var/lib/kube-proxy/kubeconfig

# cat <<EOF | sudo tee /var/lib/kube-proxy/kube-proxy-config.yaml
# kind: KubeProxyConfiguration
# apiVersion: kubeproxy.config.k8s.io/v1alpha1
# clientConnection:
#   kubeconfig: "/var/lib/kube-proxy/kubeconfig"
# mode: "iptables"
# clusterCIDR: "192.168.5.0/24"
# EOF

# cat <<EOF | sudo tee /etc/systemd/system/kube-proxy.service
# [Unit]
# Description=Kubernetes Kube Proxy
# Documentation=https://github.com/kubernetes/kubernetes

# [Service]
# ExecStart=/usr/local/bin/kube-proxy \\
#   --config=/var/lib/kube-proxy/kube-proxy-config.yaml
# Restart=on-failure
# RestartSec=5

# [Install]
# WantedBy=multi-user.target
# EOF



